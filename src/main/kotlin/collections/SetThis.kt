package collections

fun main() {
    val numbers = setOf(1, 2, 3, 4, 5, 5)
    //This will print only 1, 2, 3, 4, 5
    println("Numbers: $numbers")
    val emptyNumbers = setOf<Int>()
    println("Empty numbers: $emptyNumbers")
    val nullAndNumbers = setOf(1, 2, null, 4, null, 4, null)
    //This will print only 1, 2, 4 and one null
    println("Null and numbers: $nullAndNumbers")
    val mutableNumbers = hashSetOf(1, 2, 3, 4, 5, null)
    println("Mutable numbers: $mutableNumbers")
    val mutableEmptyNumbers = hashSetOf<Int>()
    println("Mutable empty numbers: $mutableEmptyNumbers")
    mutableNumbers.add(6)
    println("Mutable numbers after adding 6: $mutableNumbers")
    val newMutableNumbers = hashSetOf(12, 28, 49)
    println("New mutable numbers: $newMutableNumbers")
    mutableNumbers.addAll(newMutableNumbers)
    println("Mutable numbers after adding all the new mutable numbers: $mutableNumbers")
    mutableNumbers.remove(2)
    println("Mutable numbers after removing 2: $mutableNumbers")
    mutableNumbers.removeAll(newMutableNumbers)
    println("Mutable numbers after removing all the new mutable numbers: $mutableNumbers")
    mutableNumbers.remove(666)
    println("Mutable numbers after removing 666 (nothing changes): $mutableNumbers")
    val customers = hashSetOf("Jose", "Pepe", "Paco")
    println("Customers: $customers")
    customers.add("Paco")
    println("Customers after Paco arrived to the store : $customers")
    customers.remove("Pepe")
    println("Customers after Pepe left the store : $customers")
    println("Numbers set size: ${numbers.size}")
    println("Numbers contains 3? ${numbers.contains(3)}")
    println("Numbers contains 69? ${numbers.contains(69)}")
    println("Numbers contains inmutableNumbers? ${numbers.containsAll(mutableNumbers)}")
    println("Numbers contains sub set (3,5): ${numbers.containsAll(setOf(3, 5))}")
    println("Numbers is empty? ${numbers.isEmpty()}")
    println("Empty numbers is empty? ${emptyNumbers.isEmpty()}")
    println("Intersection between numbers and mutableNumbers: ${numbers.intersect(mutableNumbers)}")
    println("Union between numbers and mutableNumbers: ${numbers.union(mutableNumbers)}")
    println("Difference between numbers and mutableNumbers: ${numbers.subtract(mutableNumbers)}")
    println("Clearing mutableNumbers")
    mutableNumbers.clear()
    println("Mutable numbers after clearing: $mutableNumbers")
}